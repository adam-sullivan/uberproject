plot(nb)
myPreds <- predict(nb,testTrip)
nb <- naiveBayes(endCluster ~ uid + startCluster, data = testTrip)
head(nb)
myPreds <- predict(nb,testTrip)
myPreds <- predict(nb,testTrip[,-1])
head(myPreds)
table(myPreds,testTrip$endCluster)
sum(myPreds==testTrip$endCluster)
1524/11000
head(testTrip)
nb <- naiveBayes(endCluster ~ uid + startCluster + timeOfDay + day + numUniqueClusters, data = testTrip)
myPreds <- predict(nb,testTrip)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$endCluster)
1700/11000
?naiveBayes
nb <- naiveBayes(endCluster ~ uid + startCluster + timeOfDay + day +
numUniqueClusters, data = testTrip,laplace = 3)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$endCluster)
nb <- naiveBayes(endCluster ~ uid + startCluster + timeOfDay + day +
numUniqueClusters, data = testTrip,laplace = 10)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$endCluster)
nb <- naiveBayes(endCluster ~ uid + startCluster + timeOfDay + day +
numUniqueClusters, data = testTrip,laplace = 1)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$endCluster)
nb <- naiveBayes(endCluster ~ uid + startCluster + timeOfDay + day +
numUniqueClusters, data = testTrip,laplace = .1)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$endCluster)
nb <- naiveBayes(endCluster ~ uid + startCluster + timeOfDay + day +
numUniqueClusters, data = testTrip,laplace = .01)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$endCluster)
nb <- naiveBayes(endCluster ~ uid + startCluster + timeOfDay + day +
numUniqueClusters, data = testTrip,laplace = .01)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$endCluster)
nb <- naiveBayes(endCluster ~ startCluster + timeOfDay + day +
numUniqueClusters, data = testTrip,laplace = .01)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$endCluster)
nb <- naiveBayes(endCluster ~ startCluster + timeOfDay + day +
numUniqueClusters, data = testTrip,laplace = 0)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$endCluster)
testTrip$uid <- as.factor(testTrip$uid)
nb <- naiveBayes(endCluster ~ uid + startCluster + timeOfDay + day +
numUniqueClusters, data = testTrip,laplace = 0)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$endCluster)
out <- rhierLinearModel(Data=list(regdata=regdata),Mcmc=mcmc)
listOfUids <- unique(testTrip$uid)
regdata <- NULL
for (i in 1:100) {
filter <- testTrip$uid==listOfUids[i]
y <- tabulate(testTrip$endCluster[filter],32)
X <- cbind(
as.matrix(testTrip[filter,names(testTrip) %in% c("timeOfDay",
"day","startCluster","numUniqueClusters")]))
regdata[[i]] <- list(y=y, X=X)
}
regdata[[1]]
out = rhierMnlRwMixture(Data=list(p=32,lgtdata = regdata), Mcmc = mcmc)
Data
regdata[1]
nrow(regdata[[1]]$X)
cell1<-rbind(cell1,which.max(rmultinom(1, size = 1, prob = c(0.5,0.3,0.2))))
cell1 <- NULL
cell1<-rbind(cell1,which.max(rmultinom(1, size = 1, prob = c(0.5,0.3,0.2))))
cell1
choice<-NULL
#simulates 100 respondents and 9 choice sets
for (i in 1:100) {
cell1<-NULL
cell2<-NULL
cell3<-NULL
cell4<-NULL
cell5<-NULL
cell6<-NULL
cell7<-NULL
cell8<-NULL
cell9<-NULL
cell1<-rbind(cell1,which.max(rmultinom(1, size = 1, prob = c(0.5,0.3,0.2))))
cell2<-rbind(cell2,which.max(rmultinom(1, size = 1, prob = c(0.5,0.2,0.3))))
cell3<-rbind(cell3,which.max(rmultinom(1, size = 1, prob = c(0.5,0.1,0.4))))
cell4<-rbind(cell4,which.max(rmultinom(1, size = 1, prob = c(0.4,0.3,0.3))))
cell5<-rbind(cell5,which.max(rmultinom(1, size = 1, prob = c(0.4,0.2,0.4))))
cell6<-rbind(cell6,which.max(rmultinom(1, size = 1, prob = c(0.4,0.1,0.5))))
cell7<-rbind(cell7,which.max(rmultinom(1, size = 1, prob = c(0.3,0.3,0.4))))
cell8<-rbind(cell8,which.max(rmultinom(1, size = 1, prob = c(0.3,0.2,0.5))))
cell9<-rbind(cell9,which.max(rmultinom(1, size = 1, prob = c(0.3,0.1,0.6))))
row<-cbind(cell1,cell2,cell3,cell4,cell5,cell6,cell7,cell8,cell9)
choice<-rbind(choice,row)
}
choice
row
choice_df<-data.frame(cbind(1:100,choice))
choice_df
nb <- naiveBayes(timeOfDay  ~ uid  day +
numUniqueClusters, data = testTrip,laplace = 0)
nb <- naiveBayes(timeOfDay  ~ uid  day + numUniqueClusters, data = testTrip,laplace = 0)
nb <- naiveBayes(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 0)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$timeOfDay)
7051/11000
nb <- naiveBayes(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 0)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$timeOfDay)
7000/11000
nb <- naiveBayes(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 1)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$timeOfDay)
nb <- naiveBayes(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 10)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$timeOfDay)
nb <- adaboost(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 10)
nb <- ada(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 10)
nb <- rpart(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 10)
require(ada)
nb <- adabosot(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 10)
nb <- adaboost(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 10)
nb <- ada(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 10)
nb <- naiveBayes(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 10)
myPreds <- predict(nb,testTrip[,-1])
sum(myPreds==testTrip$timeOfDay)
head(testTrip[,-1])
head(testTrip[,])
nb <- naiveBayes(endCluster  ~ timeOfDay + uid + day + numUniqueClusters, data = testTrip,laplace = 10)
myPreds <- predict(nb,testTrip[,c(1,2,3,4,6)])
sum(myPreds==testTrip$timeOfDay)
head(myPreds)
sum(myPreds==testTrip$endCluster)
1569/11000
nb <- naiveBayes(timeOfDay  ~ uid + day + numUniqueClusters, data = testTrip,laplace = 10)
hedad(testTrip)
head(testTrip)
myPreds <- predict(nb,testTrip[,c(1,2,4,5,6)])
sum(myPreds==testTrip$timeOfDat)
sum(myPreds==testTrip$timeOfDay)
7066/11000
nb <- naiveBayes(timeOfDay  ~ uid + day + numUniqueClusters + startCluster, data = testTrip,laplace = 10)
myPreds <- predict(nb,testTrip[,c(1,2,4,5,6)])
sum(myPreds==testTrip$timeOfDay)
head(testTrip)
?naiveBayes
myPreds <- predict(nb,testTrip)
sum(myPreds==testTrip$timeOfDay)
7158/11000
nb <- naiveBayes(timeOfDay  ~ uid + day + numUniqueClusters + startCluster, data = testTrip,laplace = 10)
myPreds <- predict(nb,testTrip)
sum(myPreds==testTrip$timeOfDay)
require(caret)
confusionMatrix(table(myPreds, testTrip$timeOfDay))
?confusionMatrix
nbPreds <- predict(nb,testTrip)
confusionMatrix(table(myPreds, testTrip$timeOfDay))
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
tripData <- preprocessData('data/hw1_train.csv')
# Summary statistics
nUsers <- length(unique(tripData$uid))
ddply(tripData,.(uid), summarise, counts = count)
tripFreq <- count(tripData, .(uid))
treipFreq
tripFreq
hist(tripFreq$freq)
testData <- preprocessData('data/hw1_test.csv')
testFeatures <- featureEngineering(testData)
testFeatures <- featureEngineering(trainData)
testFeatures <- featureEngineering(trainData)
require(geosphere)
tripData$distance <- calcTripDistance(tripData,'haversine')
head(tripData)
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
tripData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
testFeatures <- featureEngineering(trainData)
testFeatures <- featureEngineering(tripData)
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
tripData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
testFeatures <- featureEngineering(tripData,truncatedData = TRUE)
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
tripData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
testFeatures <- featureEngineering(tripData,truncatedData = TRUE)
trainFeatures <- featureEngineering(tripData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
trainFeatures <- featureEngineering(tripData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
head(testData)
head(tripData)
featureEngineering(testData,truncatedData = TRUE)
featureEngineering(testData,truncatedData = TRUE)
distFrame
dist
distFrame
testFrame
type
c
c
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
testData <- preprocessData('data/hw1_test.csv')
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
tripData <- preprocessData('data/hw1_train.csv')
trainFeatures <- featureEngineering(tripData,truncatedData = TRUE)
head(testData)
head(tripData)
tail(testData)
testData <- preprocessData('data/hw1_test.csv')
head(testData)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
distFrame <- testData
dist <- distHaversine(cbind(distFrame$dropoff_lat, distFrame$dropoff_lng),
cbind(distFrame$begintrip_lat, distFrame$begintrip_lng))
distFrame$dropoff_lng
summary(distFrame$dropoff_lng)
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
tripData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(tripData,truncatedData = TRUE)
tripData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(tripData,truncatedData = TRUE)
tripData <- tripData[tripData$dropoff_lng < 360,]
head(tripData)
tripData$dropoff_lng
summary(tripData$dropoff_lng)
trainFeatures <- featureEngineering(tripData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
tripData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
tripData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(tripData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
head(tripData)
tripData$begintrip_at
sapply(strftime(tripData$begintrip_at, format="%H"),timeOfDayFnc)
trainData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(trainData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
nrow(testData)
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
trainData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(trainData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
class(testData$dropoff_lng)
class(trainData$dropoff_lng)
head(trainData)
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
trainData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(trainData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
head(trainData)
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
trainData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(trainData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
head(trainData)
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
trainData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(trainData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
tripData <- testData
tripData <- tripData[tripData$dropoff_lng < 360,]
tripData <- tripData[tripData$begintrip_lng < 360,]
tripData$distance <- calcTripDistance(tripData,'haversine')
tripData$dropoff_lng
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
trainData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(trainData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
read.table
fileInput <- 'data/hw1_train.csv'
tripData <- read.table(fileInput,header=TRUE, sep=',')
head(tripData)
tripData <- read.table(fileInput,header=TRUE, sep=',',)
head(tripDat)
head(tripData)
sum(is.na(tripData))
summary(tripData$dropoff_lng)
fileInput <- 'data/hw1_test.csv'
tripData <- read.table(fileInput,header=TRUE, sep=',',)
summary(tripData$dropoff_lng)
sum(is.na(tripData))
summary(tripData$dropoff_lng)
summary(as.numeric(as.character(tripData$dropoff_lng))
)
is.na(as.numeric(as.character(tripData$dropoff_lng))
)
sum(is.na(as.numeric(as.character(tripData$dropoff_lng)))
)
tripData <- read.table(fileInput,header=TRUE, sep=',')
tripData$uid <- as.factor(strtoi(tripData$uid,base=16))
head(tripData)
tripData <- read.table(fileInput,header=TRUE, sep=',',colClasses=c("character","numeric","numeric","numeric","numeric", "character"))
tripData <- read.table(fileInput,header=TRUE, sep=',',
fill=TRUE)
summary(tripData$dropoff_lng)
tripData <- read.table(fileInput,header=TRUE, sep=',',
fill=0)
summary(tripData$dropoff_lng)
tripData <- read.table(fileInput,header=TRUE, sep=',')
tripData$uid <- as.factor(strtoi(tripData$uid,base=16))
tripData$begintrip_at <- as.POSIXct( strptime(tripData$begintrip_at,"%Y-%m-%d_%H:%M:%S"))
tripData$begintrip_lat <- as.numeric(as.character(tripData$begintrip_lat))
tripData$begintrip_lng <- as.numeric(as.character(tripData$begintrip_lng))
tripData$dropoff_lat <- as.numeric(as.character(tripData$dropoff_lat))
tripData$dropoff_lng <- as.numeric(as.character(tripData$dropoff_lng))
complete.cases(tripData)
tripData <- tripData[completeCases(tripData),]
tripData <- tripData[complete.cases(tripData),]
tripData$uid <- as.factor(strtoi(tripData$uid,base=16))
tripData$begintrip_at <- as.POSIXct( strptime(tripData$begintrip_at,"%Y-%m-%d_%H:%M:%S"))
tripData$begintrip_lat <- as.numeric(as.character(tripData$begintrip_lat))
tripData$begintrip_lng <- as.numeric(as.character(tripData$begintrip_lng))
tripData$dropoff_lat <- as.numeric(as.character(tripData$dropoff_lat))
tripData$dropoff_lng <- as.numeric(as.character(tripData$dropoff_lng))
head(tripData)
fileInput <- 'data/hw1_test.csv'
tripData <- read.table(fileInput,header=TRUE, sep=',')
tripData <- tripData[complete.cases(tripData),]
head(tripData)
tripData$uid <- as.factor(strtoi(tripData$uid,base=16))
as.POSIXct( strptime(tripData$begintrip_at,"%Y-%m-%d_%H:%M:%S"))
tripData$begintrip_at <- as.POSIXct( strptime(tripData$begintrip_at,"%Y-%m-%d_%H:%M:%S"))
tripData$begintrip_lat <- as.numeric(as.character(tripData$begintrip_lat))
tripData$begintrip_lng <- as.numeric(as.character(tripData$begintrip_lng))
tripData$dropoff_lat <- as.numeric(as.character(tripData$dropoff_lat))
tripData$dropoff_lng <- as.numeric(as.character(tripData$dropoff_lng))
head(tripData)
tripData <- tripData[complete.cases(tripData),]
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
trainData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(trainData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
# Summary statistics
nUsers <- length(unique(tripData$uid))
nUsers <- length(unique(trainData$uid))
nUsers
tripFreq <- count(trainData, .(uid))
hist(tripFreq$freq)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
trainData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(trainData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
# Summary statistics
nUsers <- length(unique(trainData$uid))
tripFreq <- count(trainData, .(uid))
hist(tripFreq$freq)
bestModel <- naiveBayesModel(trainFeatures)
naiveBayesModel <- function(testTrip){
nbModel <- naiveBayes(timeOfDay  ~ uid + day + numUniqueClusters + startCluster, data = testTrip,laplace = 10)
return(nbModel)
}
ibrary(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
trainData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(trainData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
bestModel <- naiveBayesModel(trainFeatures)
# Summary statistics
naiveBayesTimeAnalysis(bestModel, testFeatures)
source('~/Documents/uberproject/src/main.R', echo=TRUE)
rm(list(ls()))
ls()
rm(ls())
rm(list(ls()))
rm(bestModel)
library(plyr)
library(geosphere)
#setwd('Documents/uberproject')
source('src/dataPreprocess.R')
source('src/featureEngineering.R')
source('src/Prediction.R')
trainData <- preprocessData('data/hw1_train.csv')
testData <- preprocessData('data/hw1_test.csv')
trainFeatures <- featureEngineering(trainData,truncatedData = TRUE)
testFeatures <- featureEngineering(testData,truncatedData = TRUE)
bestModel <- naiveBayesModel(trainFeatures)
naiveBayesTimeAnalysis(bestModel, testFeatures)
# Summary statistics
nUsers <- length(unique(trainData$uid))
tripFreq <- count(trainData, .(uid))
hist(tripFreq$freq)
prop.table(table(testFeature$timeOfDay))
prop.table(table(testFeatures$timeOfDay))
source('~/Documents/uberproject/src/main.R', echo=TRUE)
source('~/Documents/uberproject/src/main.R', echo=TRUE)
source('~/Documents/uberproject/src/main.R', echo=TRUE)
prop.table(table(testFeatures$timeOfDay))
install('uberdata/')
library("devtools")
install('uberdata/')
document()
document('uberdata/')
document('uberdata/')
install('uberdata/')
document('uberdata/')
install('uberdata/')
getwd()
source('~/Documents/uberproject/main.R', echo=TRUE)
source('~/Documents/uberproject/main.R', echo=TRUE)
source('~/Documents/uberproject/main.R', echo=TRUE)
setwd()
getwd()
source('~/Documents/uberproject/main.R', echo=TRUE)
source('~/Documents/uberproject/main 2.R', echo=TRUE)
source('~/Documents/uberproject/main 2.R', echo=TRUE)
source('~/Documents/uberproject/main 2.R', echo=TRUE)
source('~/Documents/uberproject/main 2.R', echo=TRUE)
source('~/Documents/uberproject/main 2.R', echo=TRUE)
source('~/Documents/uberproject/main 2.R', echo=TRUE)
source('~/Documents/uberproject/main 2.R', echo=TRUE)
install('uberdata/')
check()
ls()
check('uberdata/')
check('uberdata/')
check('uberdata/')
check('uberdata/')
texi2pdf()
tools::texi2pdf()
system("texi2dvi --version")
Sys.getenv(c("PATH", "TEX")) in R)
Sys.getenv(c("PATH", "TEX"))
